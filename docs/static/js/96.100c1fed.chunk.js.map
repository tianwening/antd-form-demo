{"version":3,"file":"static/js/96.100c1fed.chunk.js","mappings":"+NAuGA,UAnGuB,WACrB,IAAMA,GAASC,EAAAA,EAAAA,KACf,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,EAAeC,EAAAA,EAAAA,UAARC,GAAP,eAOA,OACE,UAAC,IAAD,CACEA,KAAMA,EACNC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,GACpBE,SAVa,SAACC,GAChBC,QAAQC,IAAIF,GACZP,EAAQO,EACT,EAGC,WAME,SAAC,IAAD,WACE,SAAC,IAAD,CAAKG,OAAQ,EAAGN,KAAM,EAAtB,SACGL,GAAQY,KAAKC,UAAUb,QAG5B,SAAC,SAAD,CACEc,KAAK,OADP,SAII,SAACC,EAAD,GAA8B,IAAnBC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OAQd,OAPKF,EAAOG,SACVF,EAAI,CACFG,SAAU,GACVC,gBAAiB,KAEnBvB,KAEKkB,EAAOM,KAAI,SAAAC,GAChB,OACE,UAAC,IAAD,CACEC,MAAO,CACLC,MAAO,QAGTC,UAAU,WALZ,WAOE,4BACE,SAAC,SAAD,CACEC,MAAM,eACNZ,KAAM,CAACQ,EAAMR,KAAM,YAFrB,UAIE,SAAC,IAAD,OAEF,SAAC,SAAD,CACEY,MAAM,2BACNZ,KAAM,CAACQ,EAAMR,KAAM,mBACnBa,aAAc,CAAC,CAAC,OAAQL,EAAMR,KAAM,aACpCc,MAAO,CACL,CACEC,WAAaC,EAOVR,EAAMR,KAPc,SAACiB,EAAMC,GAC5B,IAAMC,EAAW,CAAC,OAAQH,EAAO,YAEjC,OADiB3B,EAAK+B,cAAcD,KACnBD,EACRG,QAAQC,OAAO,IAAIC,MAAM,yFAE3BF,QAAQG,SAChB,KAbP,UAiBE,SAAC,IAAD,UAGJ,UAAC,IAAD,YACE,SAAC,IAAD,CAAQC,QAAS,WACfvB,EAAI,CACFG,SAAU,GACVC,gBAAiB,IAEpB,EALD,2BAMA,SAAC,IAAD,CAAQmB,QAAS,kBAAMtB,EAAOK,EAAMR,KAAnB,EAAjB,+BArCGQ,EAAMkB,KAgBS,IAACV,CAyB1B,GACF,KAGL,SAAC,SAAD,CACE1B,SAAU,CAAEC,KAAM,IAClBC,WAAY,CAAED,KAAM,GAFtB,UAIE,SAAC,IAAD,WACE,SAAC,IAAD,CAAKM,OAAQ,EAAb,UACE,SAAC,IAAD,CAAQ8B,SAAS,SAAjB,kCAMX,C,qCCrGGC,EAAgC,SAAUC,EAAGC,GAC/C,IAAIC,EAAsB,oBAAXC,QAAyBH,EAAEG,OAAOC,UACjD,IAAKF,EAAG,OAAOF,EACf,IACIK,EAEAC,EAHAC,EAAIL,EAAEM,KAAKR,GAEXS,EAAK,GAGT,IACE,WAAc,IAANR,GAAgBA,KAAM,MAAQI,EAAIE,EAAEG,QAAQC,MAClDF,EAAGG,KAAKP,EAAEhB,MAYb,CAVC,MAAOwB,GACPP,EAAI,CACFO,MAAOA,EAEV,CARD,QASE,IACMR,IAAMA,EAAEM,OAAST,EAAIK,EAAC,SAAaL,EAAEM,KAAKD,EAG/C,CAJD,QAGE,GAAID,EAAG,MAAMA,EAAEO,KAChB,CACF,CAED,OAAOJ,CACR,EAaD,IATgB,WACd,IACIK,EADKf,GAAO3C,EAAAA,EAAAA,UAAS,CAAC,GAAI,GACZ,GAElB,OAAO2D,EAAAA,EAAAA,cAAY,WACjB,OAAOD,EAAS,CAAC,EAClB,GAAE,GACJ,C","sources":["examples/simple-form-list.jsx","../node_modules/ahooks/es/useUpdate/index.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Input, Button, Row, Col, Space } from 'antd'\nimport { useUpdate } from 'ahooks'\n\nconst SimpleFormList = () => {\n  const update = useUpdate()\n  const [data, setData] = useState([])\n  const [form] = Form.useForm()\n\n  const onFinish = (params) => {\n    console.log(params)\n    setData(params)\n  }\n\n  return (\n    <Form\n      form={form}\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n      onFinish={onFinish}\n    >\n      <Row>\n        <Col offset={8} span={8}>\n          {data && JSON.stringify(data)}\n        </Col>\n      </Row>\n      <Form.List\n        name=\"list\"\n      >\n        {\n          (fields, { add, remove }) => {\n            if (!fields.length) {\n              add({\n                password: '',\n                confirmPassword: ''\n              })\n              update()\n            }\n            return fields.map(field => {\n              return (\n                <Space\n                  style={{\n                    width: '100%'\n                  }}\n                  key={field.key}\n                  direction=\"vertical\"\n                >\n                  <div >\n                    <Form.Item\n                      label=\"密码\"\n                      name={[field.name, 'password']}\n                    >\n                      <Input />\n                    </Form.Item>\n                    <Form.Item\n                      label=\"确认密码\"\n                      name={[field.name, 'confirmPassword']}\n                      dependencies={[['list', field.name, 'password']]}\n                      rules={[\n                        {\n                          validator: ((index) => (rule, value) => {\n                            const namePath = ['list', index, 'password']\n                            const password = form.getFieldValue(namePath)\n                            if (password !== value) {\n                              return Promise.reject(new Error(\"密码和确认密码不一致，请检查\"))\n                            }\n                            return Promise.resolve()\n                          })(field.name)\n                        }\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </div>\n                  <Space>\n                    <Button onClick={() => {\n                      add({\n                        password: '',\n                        confirmPassword: ''\n                      })\n                    }}>新增</Button>\n                    <Button onClick={() => remove(field.name)}>删除</Button>\n                  </Space>\n                </Space>\n              )\n            })\n          }\n        }\n      </Form.List>\n      <Form.Item\n        labelCol={{ span: 16 }}\n        wrapperCol={{ span: 8 }}\n      >\n        <Row>\n          <Col offset={4}>\n            <Button htmlType='submit'>提交</Button>\n          </Col>\n        </Row>\n      </Form.Item>\n    </Form>\n  )\n};\n\nexport default SimpleFormList;\n","var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useCallback, useState } from 'react';\n\nvar useUpdate = function useUpdate() {\n  var _a = __read(useState({}), 2),\n      setState = _a[1];\n\n  return useCallback(function () {\n    return setState({});\n  }, []);\n};\n\nexport default useUpdate;"],"names":["update","useUpdate","useState","data","setData","Form","form","labelCol","span","wrapperCol","onFinish","params","console","log","offset","JSON","stringify","name","fields","add","remove","length","password","confirmPassword","map","field","style","width","direction","label","dependencies","rules","validator","index","rule","value","namePath","getFieldValue","Promise","reject","Error","resolve","onClick","key","htmlType","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","error","setState","useCallback"],"sourceRoot":""}