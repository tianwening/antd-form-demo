{"version":3,"file":"static/js/282.faf046d1.chunk.js","mappings":"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","sources":["examples/table-form-list.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Input, Button, Row, Col, Space } from 'antd'\nimport { useEffect } from 'react';\nimport classnames from 'classnames'\n\nconst OUTER_FORM_LIST_NAME = 'outer'\nconst INNER_FORM_LIST_NAME = 'inner'\n\n// 大概长这个结构\n// {\n//   outer: [\n//     {\n//       name: '',\n//       inner: [\n//         {\n//           password: '',\n//           confirmPassword: ''\n//         }\n//       ]\n//     }\n//   ]\n// }\n\nconst TableFormList = () => {\n  const [data, setData] = useState([])\n  const [form] = Form.useForm()\n\n  useEffect(() => {\n    form.setFieldsValue({\n      [OUTER_FORM_LIST_NAME]: [\n        {\n          name: '',\n          [INNER_FORM_LIST_NAME]: [\n            {\n              password: '',\n              confirmPassword: ''\n            }\n          ]\n        }\n      ]\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  const onFinish = (params) => {\n    setData(params)\n  }\n\n  return (\n    <Form\n      form={form}\n      labelCol={{ span: 8 }}\n      wrapperCol={{ span: 8 }}\n      onFinish={onFinish}\n    >\n      <Row>\n        <Col offset={8} span={8}>\n          {data && JSON.stringify(data, null, 4)}\n        </Col>\n      </Row>\n      <div\n        className={classnames(['ant-table-wrapper'])}\n      >\n        <div\n          className={classnames(['ant-table', 'ant-table-bordered'])}\n        >\n          <div\n            className={classnames(['ant-table-container'])}\n          >\n            <div\n              className={classnames(['ant-table-content'])}\n            >\n              <table>\n                <thead className={classnames(['ant-table-thead'])}>\n                  <tr>\n                    <th className={classnames(['ant-table-cell'])}>名字</th>\n                    <th className={classnames(['ant-table-cell'])}>密码</th>\n                    <th className={classnames(['ant-table-cell'])}>确认密码</th>\n                    <th className={classnames(['ant-table-cell'])}>操作</th>\n                  </tr>\n                </thead>\n                <tbody className={classnames(['ant-table-tbody'])}>\n                  <Form.List\n                    name={OUTER_FORM_LIST_NAME}\n                  >\n                    {\n                      (outerFields, { add: addOuter }) => {\n                        return outerFields.map((outerField, { add }) => {\n                          return (\n                            <Form.List\n                              key={outerField.key}\n                              name={[outerField.name, INNER_FORM_LIST_NAME]}\n                            >\n                              {\n                                (fields, { add }) => {\n                                  return fields.map((field, index) => (\n                                    <tr key={field.key}>\n                                      {index === 0 && <td className={classnames(['ant-table-cell'])} rowSpan={fields.length || 1}>\n                                        <Form.Item\n                                          noStyle\n                                          shouldUpdate\n                                        >\n                                          {\n                                            ({ getFieldValue, setFields }) => {\n                                              const namePath = [OUTER_FORM_LIST_NAME, outerField.name, 'name']\n                                              const value = getFieldValue(namePath)\n                                              return <Input value={value} onChange={\n                                                (e) => {\n                                                  setFields([\n                                                    {\n                                                      name: namePath,\n                                                      value: e?.target?.value\n                                                    }\n                                                  ])\n                                                }\n                                              } />\n                                            }\n                                          }\n                                        </Form.Item>\n                                      </td>}\n                                      <td className={classnames(['ant-table-cell'])}>\n                                        <Form.Item\n                                          name={[field.name, 'password']}\n                                        >\n                                          <Input />\n                                        </Form.Item>\n                                      </td>\n                                      <td className={classnames(['ant-table-cell'])}>\n                                        <Form.Item\n                                          name={[field.name, 'confirmPassword']}\n                                          dependencies={[[OUTER_FORM_LIST_NAME, outerField.name, INNER_FORM_LIST_NAME, field.name, 'password']]}\n                                          rules={[\n                                            {\n                                              validator: ((pIndex, index) => (rule, value) => {\n                                                const namePath = [OUTER_FORM_LIST_NAME, pIndex, INNER_FORM_LIST_NAME, index, 'password']\n                                                const password = form.getFieldValue(namePath)\n                                                console.log(password, value)\n                                                if (password !== value) {\n                                                  return Promise.reject(new Error(\"密码和确认密码不一致，请检查\"))\n                                                }\n                                                return Promise.resolve()\n                                              })(outerField.name, field.name)\n                                            }\n                                          ]}\n                                        >\n                                          <Input />\n                                        </Form.Item>\n                                      </td>\n                                      <td className={classnames(['ant-table-cell'])}>\n                                        <Space>\n                                          {\n                                            fields.length < 5 && field.name === fields.length - 1 && <Button type=\"primary\" onClick={() => {\n                                              add({\n                                                password: '',\n                                                confirmPassword: ''\n                                              })\n                                            }}>新增</Button>\n                                          }\n                                          {\n                                            fields.length > 1 && <Button danger onClick={() => {\n                                              add({\n                                                password: '',\n                                                confirmPassword: ''\n                                              })\n                                            }}>删除</Button>\n                                          }\n\n                                        </Space>\n                                      </td>\n                                    </tr>\n                                  ))\n                                }\n                              }\n                            </Form.List>\n                          )\n                        })\n                      }\n                    }\n                  </Form.List>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Form.Item\n        labelCol={{ span: 16 }}\n        wrapperCol={{ span: 8 }}\n      >\n        <Row>\n          <Col offset={4}>\n            <Button htmlType='submit'>提交</Button>\n          </Col>\n        </Row>\n      </Form.Item>\n    </Form>\n  )\n};\n\nexport default TableFormList;\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}"],"names":["OUTER_FORM_LIST_NAME","INNER_FORM_LIST_NAME","useState","data","setData","Form","form","useEffect","setFieldsValue","name","password","confirmPassword","labelCol","span","wrapperCol","onFinish","params","offset","JSON","stringify","className","classnames","outerFields","add","map","outerField","fields","field","index","rowSpan","length","noStyle","shouldUpdate","getFieldValue","setFields","namePath","value","onChange","e","target","dependencies","rules","validator","pIndex","rule","console","log","Promise","reject","Error","resolve","type","onClick","danger","key","htmlType","_defineProperty","obj","Object","defineProperty","enumerable","configurable","writable"],"sourceRoot":""}